"""
Payload Generator per Attacchi Unicode
Creato da: Jashin L.
"""

import argparse

def generate_unicode_payloads():
    payloads = []
    payloads.append('\u202E')  # Right-to-left override
    payloads.append('\u202D')  # Left-to-right override
    payloads.append('\u202C')  # Pop directional formatting
    payloads.append('\u200F')  # Right-to-left mark
    payloads.append('\u200E')  # Left-to-right mark
    payloads.append('\u2066')  # Left-to-right isolate
    payloads.append('\u2067')  # Right-to-left isolate
    payloads.append('\u2068')  # First strong isolate
    payloads.append('\u2069')  # Pop directional isolate
    payloads.append('\u202A')  # Left-to-right embedding
    payloads.append('\u202B')  # Right-to-left embedding
    payloads.append('\uFFFD')  # Replacement character
    payloads.append('\u200B')  # Zero width space
    payloads.append('\u200C')  # Zero width non-joiner
    payloads.append('\u200D')  # Zero width joiner

    # Aggiungere altri payload noti per vulnerabilit√† Unicode

    return payloads

def save_payloads_to_file(payloads, output_file):
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            for payload in payloads:
                f.write(payload + '\n')
        print(f"Payload salvati su {output_file}")
    except Exception as e:
        print(f"Errore durante il salvataggio dei payload: {e}")

def main():
    parser = argparse.ArgumentParser(description="Payload Generator per Attacchi Unicode")
    parser.add_argument("--output", required=True, help="File di output per salvare i payload generati")
    args = parser.parse_args()

    payloads = generate_unicode_payloads()
    save_payloads_to_file(payloads, args.output)

if __name__ == "__main__":
    main()