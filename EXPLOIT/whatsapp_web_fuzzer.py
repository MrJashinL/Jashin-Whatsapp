"""
WhatsApp Web Fuzzer
Creato da: Jashin L.
"""

import argparse
import random
import string
import time
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from bs4 import BeautifulSoup

def generate_random_string(length):
    letters = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(letters) for i in range(length))

def generate_random_emoji(length):
    emojis = [chr(i) for i in range(0x1F600, 0x1F64F)]
    return ''.join(random.choice(emojis) for i in range(length))

def fuzz_whatsapp_web(url, output_file):
    driver = webdriver.Chrome()
    driver.get(url)

    print("Attendi il completamento dell'accesso a WhatsApp Web...")
    time.sleep(15)  # attende l'accesso manuale

    input_box = driver.find_element_by_xpath('//div[@contenteditable="true"][@data-tab="6"]')

    with open(output_file, 'w') as f:
        for i in range(100):  # numero di input da generare
            random_string = generate_random_string(random.randint(1, 1000))
            random_emoji = generate_random_emoji(random.randint(1, 10))
            input_data = random_string + random_emoji
            input_box.send_keys(input_data)
            input_box.send_keys(Keys.RETURN)
            f.write(f"Input {i+1}: {input_data}\n")
            time.sleep(1)  # attende un secondo tra un input e l'altro

    print("Fuzzing completato.")
    driver.quit()

def main():
    parser = argparse.ArgumentParser(description="WhatsApp Web Fuzzer")
    parser.add_argument("--url", required=True, help="URL di WhatsApp Web")
    parser.add_argument("--output", required=True, help="File di output per salvare i risultati del fuzzing")
    args = parser.parse_args()
    
    url = args.url
    output_file = args.output
    fuzz_whatsapp_web(url, output_file)

if __name__ == "__main__":
    main()